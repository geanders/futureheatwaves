// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/futureheatwaves.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// IDHeatwavesCPP
DataFrame IDHeatwavesCPP(int heatwaveLength, NumericVector tempsExceedingCutoff);
static SEXP futureheatwaves_IDHeatwavesCPP_try(SEXP heatwaveLengthSEXP, SEXP tempsExceedingCutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< int >::type heatwaveLength(heatwaveLengthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tempsExceedingCutoff(tempsExceedingCutoffSEXP);
    __result = Rcpp::wrap(IDHeatwavesCPP(heatwaveLength, tempsExceedingCutoff));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP futureheatwaves_IDHeatwavesCPP(SEXP heatwaveLengthSEXP, SEXP tempsExceedingCutoffSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(futureheatwaves_IDHeatwavesCPP_try(heatwaveLengthSEXP, tempsExceedingCutoffSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// storeHeatwaveEntry
void storeHeatwaveEntry(int index, int hwSize, int hwCounter, std::vector<int>& hw, std::vector<int>& hwNumber);
static SEXP futureheatwaves_storeHeatwaveEntry_try(SEXP indexSEXP, SEXP hwSizeSEXP, SEXP hwCounterSEXP, SEXP hwSEXP, SEXP hwNumberSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type hwSize(hwSizeSEXP);
    Rcpp::traits::input_parameter< int >::type hwCounter(hwCounterSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type hw(hwSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type hwNumber(hwNumberSEXP);
    storeHeatwaveEntry(index, hwSize, hwCounter, hw, hwNumber);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP futureheatwaves_storeHeatwaveEntry(SEXP indexSEXP, SEXP hwSizeSEXP, SEXP hwCounterSEXP, SEXP hwSEXP, SEXP hwNumberSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(futureheatwaves_storeHeatwaveEntry_try(indexSEXP, hwSizeSEXP, hwCounterSEXP, hwSEXP, hwNumberSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// storeZeroes
void storeZeroes(int index, int potentialHeatwave, std::vector<int>& hw, std::vector<int>& hwNumber);
static SEXP futureheatwaves_storeZeroes_try(SEXP indexSEXP, SEXP potentialHeatwaveSEXP, SEXP hwSEXP, SEXP hwNumberSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type potentialHeatwave(potentialHeatwaveSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type hw(hwSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type hwNumber(hwNumberSEXP);
    storeZeroes(index, potentialHeatwave, hw, hwNumber);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP futureheatwaves_storeZeroes(SEXP indexSEXP, SEXP potentialHeatwaveSEXP, SEXP hwSEXP, SEXP hwNumberSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(futureheatwaves_storeZeroes_try(indexSEXP, potentialHeatwaveSEXP, hwSEXP, hwNumberSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}

// validate (ensure exported C++ functions exist before calling them)
static int futureheatwaves_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("DataFrame(*IDHeatwavesCPP)(int,NumericVector)");
        signatures.insert("void(*storeHeatwaveEntry)(int,int,int,std::vector<int>&,std::vector<int>&)");
        signatures.insert("void(*storeZeroes)(int,int,std::vector<int>&,std::vector<int>&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP futureheatwaves_RcppExport_registerCCallable() { 
    R_RegisterCCallable("futureheatwaves", "futureheatwaves_IDHeatwavesCPP", (DL_FUNC)futureheatwaves_IDHeatwavesCPP_try);
    R_RegisterCCallable("futureheatwaves", "futureheatwaves_storeHeatwaveEntry", (DL_FUNC)futureheatwaves_storeHeatwaveEntry_try);
    R_RegisterCCallable("futureheatwaves", "futureheatwaves_storeZeroes", (DL_FUNC)futureheatwaves_storeZeroes_try);
    R_RegisterCCallable("futureheatwaves", "futureheatwaves_RcppExport_validate", (DL_FUNC)futureheatwaves_RcppExport_validate);
    return R_NilValue;
}
